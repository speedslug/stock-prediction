{"ast":null,"code":"var _jsxFileName = \"D:\\\\stock-prediction-lstm-main\\\\client\\\\src\\\\api\\\\dataFetchers.js\";\nimport axios from \"axios\";\nimport { AutoGraph, Insights, PriceChange, Lightbulb, TrendingUp } from \"@mui/icons-material\";\n\n// Market News Fetcher\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const fetchMarketNews = async () => {\n  try {\n    // Using mock data instead of real API to avoid rate limits and timeouts\n    return [{\n      title: \"Tech Stocks Rally as Inflation Concerns Ease\",\n      summary: \"Major tech companies saw significant gains as new economic data suggests inflation may be cooling, leading investors to...\",\n      change: \"+1.8%\",\n      isPositive: true,\n      source: \"Financial Times\",\n      time: new Date().toLocaleTimeString()\n    }, {\n      title: \"Federal Reserve Signals Potential Rate Cut\",\n      summary: \"In a surprising move, the Federal Reserve indicated it may consider rate cuts in the coming months as economic...\",\n      change: \"+2.3%\",\n      isPositive: true,\n      source: \"Wall Street Journal\",\n      time: new Date().toLocaleTimeString()\n    }, {\n      title: \"Oil Prices Drop Amid Supply Concerns\",\n      summary: \"Crude oil futures fell sharply today as reports of increased production from major oil-producing nations raised concerns...\",\n      change: \"-1.5%\",\n      isPositive: false,\n      source: \"Bloomberg\",\n      time: new Date().toLocaleTimeString()\n    }, {\n      title: \"Retail Sales Exceed Expectations in Q2\",\n      summary: \"Consumer spending showed resilience in the second quarter, with retail sales figures surpassing analyst expectations by...\",\n      change: \"+0.9%\",\n      isPositive: true,\n      source: \"CNBC\",\n      time: new Date().toLocaleTimeString()\n    }, {\n      title: \"Cryptocurrency Market Faces Regulatory Scrutiny\",\n      summary: \"Bitcoin and other cryptocurrencies declined as lawmakers proposed new regulations aimed at increasing transparency and...\",\n      change: \"-2.1%\",\n      isPositive: false,\n      source: \"Reuters\",\n      time: new Date().toLocaleTimeString()\n    }];\n  } catch (error) {\n    console.error(\"Error fetching market news:\", error);\n    return [];\n  }\n};\n\n// Market Data Fetcher\nexport const fetchMarketData = async () => {\n  try {\n    // Using mock data instead of real API to avoid rate limits and timeouts\n    return [{\n      symbol: \"AAPL\",\n      price: 182.63,\n      change: \"+1.24%\",\n      volume: \"62.3M\"\n    }, {\n      symbol: \"MSFT\",\n      price: 337.42,\n      change: \"+0.87%\",\n      volume: \"23.1M\"\n    }, {\n      symbol: \"GOOGL\",\n      price: 131.86,\n      change: \"-0.32%\",\n      volume: \"18.7M\"\n    }, {\n      symbol: \"AMZN\",\n      price: 127.74,\n      change: \"+2.15%\",\n      volume: \"45.2M\"\n    }];\n  } catch (error) {\n    console.error(\"Error fetching market data:\", error);\n    return [];\n  }\n};\n\n// Performance Data Fetcher\nexport const fetchPerformanceData = async () => {\n  try {\n    // Using mock data instead of real API to avoid rate limits and timeouts\n    const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    const currentMonth = new Date().getMonth();\n\n    // Create last 7 months in sequence\n    const last7Months = Array.from({\n      length: 7\n    }, (_, i) => {\n      const monthIndex = (currentMonth - 6 + i + 12) % 12; // Ensure positive index\n      return monthNames[monthIndex];\n    });\n\n    // Create realistic looking growth pattern\n    const baseValue = 1000;\n    const values = [baseValue];\n    for (let i = 1; i < 7; i++) {\n      const change = (Math.random() * 0.08 - 0.02) * values[i - 1]; // -2% to +6% change\n      values.push(Math.round((values[i - 1] + change) * 100) / 100);\n    }\n    return last7Months.map((month, index) => ({\n      name: month,\n      value: values[index],\n      profit: index > 0 ? ((values[index] - values[index - 1]) / values[index - 1] * 100).toFixed(1) : 0\n    }));\n  } catch (error) {\n    console.error(\"Error fetching performance data:\", error);\n    return [];\n  }\n};\n\n// Portfolio Data Fetcher\nexport const fetchPortfolioData = async () => {\n  try {\n    // Using realistic sector weights based on typical portfolio allocation\n    return [{\n      name: \"Technology\",\n      value: 28\n    }, {\n      name: \"Financial Services\",\n      value: 22\n    }, {\n      name: \"Healthcare\",\n      value: 18\n    }, {\n      name: \"Consumer Cyclical\",\n      value: 12\n    }, {\n      name: \"Energy & Utilities\",\n      value: 20\n    }];\n  } catch (error) {\n    console.error(\"Error fetching portfolio data:\", error);\n    return [];\n  }\n};\n\n// Market Trends Fetcher\nexport const fetchMarketTrends = async () => {\n  try {\n    // Using mock data instead of real API to avoid rate limits and timeouts\n    return [{\n      name: \"NASDAQ\",\n      value: \"+1.2%\",\n      status: \"up\"\n    }, {\n      name: \"S&P 500\",\n      value: \"+0.8%\",\n      status: \"up\"\n    }, {\n      name: \"DOW\",\n      value: \"-0.3%\",\n      status: \"down\"\n    }, {\n      name: \"Russell 2000\",\n      value: \"+1.5%\",\n      status: \"up\"\n    }];\n  } catch (error) {\n    console.error(\"Error fetching market trends:\", error);\n    return [];\n  }\n};\n\n// AI Insights Fetcher\nexport const fetchAiInsights = async () => {\n  try {\n    // Using mock data instead of real API to avoid rate limits and timeouts\n    return [{\n      title: \"Tech Sector Outlook\",\n      description: \"Tech stocks showing resilience despite market pressure with potential for continued growth.\",\n      confidence: 78,\n      icon: /*#__PURE__*/_jsxDEV(AutoGraph, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 15\n      }, this)\n    }, {\n      title: \"Market Volatility Prediction\",\n      description: \"Based on recent trends, expect decreased volatility in the coming weeks.\",\n      confidence: 82,\n      icon: /*#__PURE__*/_jsxDEV(Insights, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 15\n      }, this)\n    }, {\n      title: \"Investment Opportunity\",\n      description: \"Renewable energy sector shows promising growth potential based on recent policy changes.\",\n      confidence: 85,\n      icon: /*#__PURE__*/_jsxDEV(Lightbulb, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 15\n      }, this)\n    }];\n  } catch (error) {\n    console.error(\"Error fetching AI insights:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["axios","AutoGraph","Insights","PriceChange","Lightbulb","TrendingUp","jsxDEV","_jsxDEV","fetchMarketNews","title","summary","change","isPositive","source","time","Date","toLocaleTimeString","error","console","fetchMarketData","symbol","price","volume","fetchPerformanceData","monthNames","currentMonth","getMonth","last7Months","Array","from","length","_","i","monthIndex","baseValue","values","Math","random","push","round","map","month","index","name","value","profit","toFixed","fetchPortfolioData","fetchMarketTrends","status","fetchAiInsights","description","confidence","icon","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/stock-prediction-lstm-main/client/src/api/dataFetchers.js"],"sourcesContent":["import axios from \"axios\";\nimport {\n  AutoGraph,\n  Insights,\n  PriceChange,\n  Lightbulb,\n  TrendingUp,\n} from \"@mui/icons-material\";\n\n// Market News Fetcher\nexport const fetchMarketNews = async () => {\n  try {\n    // Using mock data instead of real API to avoid rate limits and timeouts\n    return [\n      {\n        title: \"Tech Stocks Rally as Inflation Concerns Ease\",\n        summary:\n          \"Major tech companies saw significant gains as new economic data suggests inflation may be cooling, leading investors to...\",\n        change: \"+1.8%\",\n        isPositive: true,\n        source: \"Financial Times\",\n        time: new Date().toLocaleTimeString(),\n      },\n      {\n        title: \"Federal Reserve Signals Potential Rate Cut\",\n        summary:\n          \"In a surprising move, the Federal Reserve indicated it may consider rate cuts in the coming months as economic...\",\n        change: \"+2.3%\",\n        isPositive: true,\n        source: \"Wall Street Journal\",\n        time: new Date().toLocaleTimeString(),\n      },\n      {\n        title: \"Oil Prices Drop Amid Supply Concerns\",\n        summary:\n          \"Crude oil futures fell sharply today as reports of increased production from major oil-producing nations raised concerns...\",\n        change: \"-1.5%\",\n        isPositive: false,\n        source: \"Bloomberg\",\n        time: new Date().toLocaleTimeString(),\n      },\n      {\n        title: \"Retail Sales Exceed Expectations in Q2\",\n        summary:\n          \"Consumer spending showed resilience in the second quarter, with retail sales figures surpassing analyst expectations by...\",\n        change: \"+0.9%\",\n        isPositive: true,\n        source: \"CNBC\",\n        time: new Date().toLocaleTimeString(),\n      },\n      {\n        title: \"Cryptocurrency Market Faces Regulatory Scrutiny\",\n        summary:\n          \"Bitcoin and other cryptocurrencies declined as lawmakers proposed new regulations aimed at increasing transparency and...\",\n        change: \"-2.1%\",\n        isPositive: false,\n        source: \"Reuters\",\n        time: new Date().toLocaleTimeString(),\n      },\n    ];\n  } catch (error) {\n    console.error(\"Error fetching market news:\", error);\n    return [];\n  }\n};\n\n// Market Data Fetcher\nexport const fetchMarketData = async () => {\n  try {\n    // Using mock data instead of real API to avoid rate limits and timeouts\n    return [\n      {\n        symbol: \"AAPL\",\n        price: 182.63,\n        change: \"+1.24%\",\n        volume: \"62.3M\",\n      },\n      {\n        symbol: \"MSFT\",\n        price: 337.42,\n        change: \"+0.87%\",\n        volume: \"23.1M\",\n      },\n      {\n        symbol: \"GOOGL\",\n        price: 131.86,\n        change: \"-0.32%\",\n        volume: \"18.7M\",\n      },\n      {\n        symbol: \"AMZN\",\n        price: 127.74,\n        change: \"+2.15%\",\n        volume: \"45.2M\",\n      },\n    ];\n  } catch (error) {\n    console.error(\"Error fetching market data:\", error);\n    return [];\n  }\n};\n\n// Performance Data Fetcher\nexport const fetchPerformanceData = async () => {\n  try {\n    // Using mock data instead of real API to avoid rate limits and timeouts\n    const monthNames = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const currentMonth = new Date().getMonth();\n\n    // Create last 7 months in sequence\n    const last7Months = Array.from({ length: 7 }, (_, i) => {\n      const monthIndex = (currentMonth - 6 + i + 12) % 12; // Ensure positive index\n      return monthNames[monthIndex];\n    });\n\n    // Create realistic looking growth pattern\n    const baseValue = 1000;\n    const values = [baseValue];\n\n    for (let i = 1; i < 7; i++) {\n      const change = (Math.random() * 0.08 - 0.02) * values[i - 1]; // -2% to +6% change\n      values.push(Math.round((values[i - 1] + change) * 100) / 100);\n    }\n\n    return last7Months.map((month, index) => ({\n      name: month,\n      value: values[index],\n      profit:\n        index > 0\n          ? (\n              ((values[index] - values[index - 1]) / values[index - 1]) *\n              100\n            ).toFixed(1)\n          : 0,\n    }));\n  } catch (error) {\n    console.error(\"Error fetching performance data:\", error);\n    return [];\n  }\n};\n\n// Portfolio Data Fetcher\nexport const fetchPortfolioData = async () => {\n  try {\n    // Using realistic sector weights based on typical portfolio allocation\n    return [\n      { name: \"Technology\", value: 28 },\n      { name: \"Financial Services\", value: 22 },\n      { name: \"Healthcare\", value: 18 },\n      { name: \"Consumer Cyclical\", value: 12 },\n      { name: \"Energy & Utilities\", value: 20 },\n    ];\n  } catch (error) {\n    console.error(\"Error fetching portfolio data:\", error);\n    return [];\n  }\n};\n\n// Market Trends Fetcher\nexport const fetchMarketTrends = async () => {\n  try {\n    // Using mock data instead of real API to avoid rate limits and timeouts\n    return [\n      {\n        name: \"NASDAQ\",\n        value: \"+1.2%\",\n        status: \"up\",\n      },\n      {\n        name: \"S&P 500\",\n        value: \"+0.8%\",\n        status: \"up\",\n      },\n      {\n        name: \"DOW\",\n        value: \"-0.3%\",\n        status: \"down\",\n      },\n      {\n        name: \"Russell 2000\",\n        value: \"+1.5%\",\n        status: \"up\",\n      },\n    ];\n  } catch (error) {\n    console.error(\"Error fetching market trends:\", error);\n    return [];\n  }\n};\n\n// AI Insights Fetcher\nexport const fetchAiInsights = async () => {\n  try {\n    // Using mock data instead of real API to avoid rate limits and timeouts\n    return [\n      {\n        title: \"Tech Sector Outlook\",\n        description:\n          \"Tech stocks showing resilience despite market pressure with potential for continued growth.\",\n        confidence: 78,\n        icon: <AutoGraph />,\n      },\n      {\n        title: \"Market Volatility Prediction\",\n        description:\n          \"Based on recent trends, expect decreased volatility in the coming weeks.\",\n        confidence: 82,\n        icon: <Insights />,\n      },\n      {\n        title: \"Investment Opportunity\",\n        description:\n          \"Renewable energy sector shows promising growth potential based on recent policy changes.\",\n        confidence: 85,\n        icon: <Lightbulb />,\n      },\n    ];\n  } catch (error) {\n    console.error(\"Error fetching AI insights:\", error);\n    return [];\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}